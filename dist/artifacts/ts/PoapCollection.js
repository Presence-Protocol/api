"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PoapCollectionInstance = exports.PoapCollection = void 0;
const web3_1 = require("@alephium/web3");
const PoapCollection_ral_json_1 = __importDefault(require("../PoapCollection.ral.json"));
const contracts_1 = require("./contracts");
const types_1 = require("./types");
class Factory extends web3_1.ContractFactory {
    constructor() {
        super(...arguments);
        this.eventIndex = { PoapMinted: 0 };
        this.consts = {
            ErrorCodes: {
                IncorrectTokenIndex: BigInt("0"),
                NFTNotFound: BigInt("1"),
                NFTNotPartOfCollection: BigInt("2"),
                MaxSupplyReached: BigInt("3"),
                MintEnded: BigInt("4"),
                MintNotStarted: BigInt("5"),
            },
        };
        this.tests = {
            getCollectionUri: async (params) => {
                return (0, web3_1.testMethod)(this, "getCollectionUri", params, contracts_1.getContractByCodeHash);
            },
            totalSupply: async (params) => {
                return (0, web3_1.testMethod)(this, "totalSupply", params, contracts_1.getContractByCodeHash);
            },
            nftByIndex: async (params) => {
                return (0, web3_1.testMethod)(this, "nftByIndex", params, contracts_1.getContractByCodeHash);
            },
            validateNFT: async (params) => {
                return (0, web3_1.testMethod)(this, "validateNFT", params, contracts_1.getContractByCodeHash);
            },
            mint: async (params) => {
                return (0, web3_1.testMethod)(this, "mint", params, contracts_1.getContractByCodeHash);
            },
        };
    }
    encodeFields(fields) {
        return (0, web3_1.encodeContractFields)((0, web3_1.addStdIdToFields)(this.contract, fields), this.contract.fieldsSig, types_1.AllStructs);
    }
    at(address) {
        return new PoapCollectionInstance(address);
    }
    stateForTest(initFields, asset, address) {
        return this.stateForTest_(initFields, asset, address, undefined);
    }
}
// Use this object to test and deploy the contract
exports.PoapCollection = new Factory(web3_1.Contract.fromJson(PoapCollection_ral_json_1.default, "", "e2e7b4c5136aba48caaecf457d964321a949e32d4cf638c7206080665faf85a5", types_1.AllStructs));
(0, contracts_1.registerContract)(exports.PoapCollection);
// Use this class to interact with the blockchain
class PoapCollectionInstance extends web3_1.ContractInstance {
    constructor(address) {
        super(address);
        this.view = {
            getCollectionUri: async (params) => {
                return (0, web3_1.callMethod)(exports.PoapCollection, this, "getCollectionUri", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            totalSupply: async (params) => {
                return (0, web3_1.callMethod)(exports.PoapCollection, this, "totalSupply", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            nftByIndex: async (params) => {
                return (0, web3_1.callMethod)(exports.PoapCollection, this, "nftByIndex", params, contracts_1.getContractByCodeHash);
            },
            validateNFT: async (params) => {
                return (0, web3_1.callMethod)(exports.PoapCollection, this, "validateNFT", params, contracts_1.getContractByCodeHash);
            },
            mint: async (params) => {
                return (0, web3_1.callMethod)(exports.PoapCollection, this, "mint", params, contracts_1.getContractByCodeHash);
            },
        };
        this.transact = {
            getCollectionUri: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.PoapCollection, this, "getCollectionUri", params);
            },
            totalSupply: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.PoapCollection, this, "totalSupply", params);
            },
            nftByIndex: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.PoapCollection, this, "nftByIndex", params);
            },
            validateNFT: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.PoapCollection, this, "validateNFT", params);
            },
            mint: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.PoapCollection, this, "mint", params);
            },
        };
    }
    async fetchState() {
        return (0, web3_1.fetchContractState)(exports.PoapCollection, this);
    }
    async getContractEventsCurrentCount() {
        return (0, web3_1.getContractEventsCurrentCount)(this.address);
    }
    subscribePoapMintedEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.PoapCollection.contract, this, options, "PoapMinted", fromCount);
    }
    async multicall(callss) {
        return await (0, web3_1.multicallMethods)(exports.PoapCollection, this, callss, contracts_1.getContractByCodeHash);
    }
}
exports.PoapCollectionInstance = PoapCollectionInstance;
