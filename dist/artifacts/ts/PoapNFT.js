"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PoapNFTInstance = exports.PoapNFT = void 0;
const web3_1 = require("@alephium/web3");
const PoapNFT_ral_json_1 = __importDefault(require("../PoapNFT.ral.json"));
const contracts_1 = require("./contracts");
const types_1 = require("./types");
class Factory extends web3_1.ContractFactory {
    constructor() {
        super(...arguments);
        this.tests = {
            getTokenUri: async (params) => {
                return (0, web3_1.testMethod)(this, "getTokenUri", params, contracts_1.getContractByCodeHash);
            },
            getCollectionIndex: async (params) => {
                return (0, web3_1.testMethod)(this, "getCollectionIndex", params, contracts_1.getContractByCodeHash);
            },
            getNFTIndex: async (params) => {
                return (0, web3_1.testMethod)(this, "getNFTIndex", params, contracts_1.getContractByCodeHash);
            },
            getName: async (params) => {
                return (0, web3_1.testMethod)(this, "getName", params, contracts_1.getContractByCodeHash);
            },
            getDescription: async (params) => {
                return (0, web3_1.testMethod)(this, "getDescription", params, contracts_1.getContractByCodeHash);
            },
            getImage: async (params) => {
                return (0, web3_1.testMethod)(this, "getImage", params, contracts_1.getContractByCodeHash);
            },
            getTraits: async (params) => {
                return (0, web3_1.testMethod)(this, "getTraits", params, contracts_1.getContractByCodeHash);
            },
            getTraitCount: async (params) => {
                return (0, web3_1.testMethod)(this, "getTraitCount", params, contracts_1.getContractByCodeHash);
            },
            getTraitAtIndex: async (params) => {
                return (0, web3_1.testMethod)(this, "getTraitAtIndex", params, contracts_1.getContractByCodeHash);
            },
        };
    }
    encodeFields(fields) {
        return (0, web3_1.encodeContractFields)((0, web3_1.addStdIdToFields)(this.contract, fields), this.contract.fieldsSig, types_1.AllStructs);
    }
    at(address) {
        return new PoapNFTInstance(address);
    }
    stateForTest(initFields, asset, address) {
        return this.stateForTest_(initFields, asset, address, undefined);
    }
}
// Use this object to test and deploy the contract
exports.PoapNFT = new Factory(web3_1.Contract.fromJson(PoapNFT_ral_json_1.default, "", "8843113164c9296b70fcdea9933692d24a9c818fce96e1a8ed4b776803f9ab7a", types_1.AllStructs));
(0, contracts_1.registerContract)(exports.PoapNFT);
// Use this class to interact with the blockchain
class PoapNFTInstance extends web3_1.ContractInstance {
    constructor(address) {
        super(address);
        this.view = {
            getTokenUri: async (params) => {
                return (0, web3_1.callMethod)(exports.PoapNFT, this, "getTokenUri", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getCollectionIndex: async (params) => {
                return (0, web3_1.callMethod)(exports.PoapNFT, this, "getCollectionIndex", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getNFTIndex: async (params) => {
                return (0, web3_1.callMethod)(exports.PoapNFT, this, "getNFTIndex", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getName: async (params) => {
                return (0, web3_1.callMethod)(exports.PoapNFT, this, "getName", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getDescription: async (params) => {
                return (0, web3_1.callMethod)(exports.PoapNFT, this, "getDescription", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getImage: async (params) => {
                return (0, web3_1.callMethod)(exports.PoapNFT, this, "getImage", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getTraits: async (params) => {
                return (0, web3_1.callMethod)(exports.PoapNFT, this, "getTraits", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getTraitCount: async (params) => {
                return (0, web3_1.callMethod)(exports.PoapNFT, this, "getTraitCount", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getTraitAtIndex: async (params) => {
                return (0, web3_1.callMethod)(exports.PoapNFT, this, "getTraitAtIndex", params, contracts_1.getContractByCodeHash);
            },
        };
        this.transact = {
            getTokenUri: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.PoapNFT, this, "getTokenUri", params);
            },
            getCollectionIndex: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.PoapNFT, this, "getCollectionIndex", params);
            },
            getNFTIndex: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.PoapNFT, this, "getNFTIndex", params);
            },
            getName: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.PoapNFT, this, "getName", params);
            },
            getDescription: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.PoapNFT, this, "getDescription", params);
            },
            getImage: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.PoapNFT, this, "getImage", params);
            },
            getTraits: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.PoapNFT, this, "getTraits", params);
            },
            getTraitCount: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.PoapNFT, this, "getTraitCount", params);
            },
            getTraitAtIndex: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.PoapNFT, this, "getTraitAtIndex", params);
            },
        };
    }
    async fetchState() {
        return (0, web3_1.fetchContractState)(exports.PoapNFT, this);
    }
    async multicall(callss) {
        return await (0, web3_1.multicallMethods)(exports.PoapNFT, this, callss, contracts_1.getContractByCodeHash);
    }
}
exports.PoapNFTInstance = PoapNFTInstance;
